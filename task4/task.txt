История создания

Перед Бренданом Эйхом, нанятым в компанию Netscape 4 апреля 1995 года была поставлена задача внедрить язык программирования Scheme или что-то похожее в браузер Netscape. 
Поскольку требования были размыты, Эйха перевели в группу, ответственную за серверные продукты, где он проработал месяц, занимаясь улучшением протокола HTTP. 
В мае разработчик был переброшен обратно, в команду, занимающуюся клиентской частью (браузером), где он немедленно начал разрабатывать концепцию нового языка программирования. 
Менеджмент разработки браузера, включая Тома Пакина (Tom Paquin), Михаэля Тоя (англ.), Рика Шелла (Rick Schell), был убеждён, что Netscape должен поддерживать язык программирования,
 встраиваемый в HTML-код страницы.
Помимо Брендана Эйха, в разработке участвовали сооснователь Netscape Communications Марк Андрессен и сооснователь Sun Microsystems Билл Джой: 
чтобы успеть закончить работы над языком к релизу браузера, компании заключили соглашение о сотрудничестве в разработке. 
Они ставили перед собой цель обеспечить «язык для склеивания» составляющих частей веб-ресурса: изображений, плагинов, Java-апплетов, 
который был бы удобен для веб-дизайнеров и программистов, не обладающих высокой квалификацией.
Первоначально язык назывался Mocha, затем он был переименован в LiveScript[22][23] и 
предназначался как для программирования на стороне клиента, так и для программирования на стороне сервера (там он должен был называться LiveWire). 
4 декабря 1995 года LiveScript переименовали в JavaScript[24], получив соответствующую лицензию у Sun. 
В 1996 году компания Microsoft выпустила аналог языка JavaScript, названный JScript. 
Анонсирован этот язык был 18 июля 1996 года. Первым браузером, поддерживающим эту реализацию, был Internet Explorer 3.0.
Краткий обзор языка
Структурно JavaScript можно представить в виде объединения трёх чётко различимых друг от друга частей:
•	ядро (ECMAScript),
•	объектная модель браузера (Browser Object Model или BOM (англ.)),
•	объектная модель документа (Document Object Model или DOM).
Если рассматривать JavaScript в отличных от браузера окружениях, то объектная модель браузера и объектная модель документа могут не поддерживаться.
Объектную модель документа иногда рассматривают как отдельную от JavaScript сущность, что согласуется с определением DOM как независимого от языка интерфейса документа. 
В противоположность этому ряд авторов находит BOM и DOM тесно взаимосвязанными.
Ядро 
ECMAScript не является браузерным языком и в нём не определяются методы ввода и вывода информации. 
Это, скорее, основа для построения скриптовых языков. Спецификация ECMAScript описывает типы данных, инструкции, ключевые и зарезервированные слова, операторы, объекты, регулярные выражения, 
не ограничивая авторов производных языков в расширении их новыми составляющими.
Объектная модель браузера
Объектная модель браузера — браузер-специфичная часть языка, являющаяся прослойкой между ядром и объектной моделью документа. 
Основное предназначение объектной модели браузера — управление окнами браузера и обеспечение их взаимодействия. 
Каждое из окон браузера представляется объектом window, центральным объектом DOM. Объектная модель браузера на данный момент не стандартизирована, 
однако спецификация находится в разработке WHATWG и W3C.
Помимо управления окнами, в рамках объектной модели браузера, браузерами обычно обеспечивается поддержка следующих сущностей:
•	управление фреймами,
•	поддержка задержки в исполнении кода и зацикливания с задержкой,
•	системные диалоги,
•	управление адресом открытой страницы,
•	управление информацией о браузере,
•	управление информацией о параметрах монитора,
•	ограниченное управление историей просмотра страниц,
•	поддержка работы с HTTP cookie.
Объектная модель документа
Объектная модель документа — интерфейс программирования приложений для HTML и XML-документов. Согласно DOM, документ (например, веб-страница) 
может быть представлен в виде дерева объектов, обладающих рядом свойств, которые позволяют производить с ним различные манипуляции:
•	генерация и добавление узлов,
•	получение узлов,
•	изменение узлов,
•	изменение связей между узлами,
•	удаление узлов.

Примеры кода
Расположение внутри страницы
Для добавления JavaScript-кода на страницу можно использовать теги <script></script>, которые рекомендуется, но не обязательно,
 помещать внутри контейнера <head>. Контейнеров <script> в одном документе может быть сколько угодно. Атрибут type="text/javascript" указывать необязательно,
 данное значение используется по умолчанию.
Скрипт, выводящий модальное окно с классической надписью «Hello, World!» внутри браузера:
<script type="application/javascript">
  alert('Hello, World!');
</script>
Расположение внутри тега
Спецификация HTML описывает набор атрибутов, используемых для задания обработчиков событий. Пример использования:
<a href="delete.php" onclick="return confirm('Вы уверены?'); return false;">
  Удалить
</a>
В приведённом примере при нажатии на ссылку функция confirm('Вы уверены?'); вызывает модальное окно с надписью «Вы уверены?», 
а return false; блокирует переход по ссылке. Разумеется, этот код будет работать только если в браузере есть и включена поддержка JavaScript, 
иначе переход по ссылке произойдёт без предупреждения.
Использование кода JavaScript в контексте разметки страницы расценивается в рамках ненавязчивого JavaScript как плохая практика. 
Аналогом (при условии снабжения ссылки идентификатором alertLink)
<a href="delete.php" id="alertLink">
  Удалить
</a>
приведённого примера может являться, например, следующий фрагмент JavaScript:
window.onload = function() {
    var linkWithAlert = document.getElementById("alertLink");
    linkWithAlert.onclick = function() {
        return confirm('Вы уверены?'); 
    };
};



